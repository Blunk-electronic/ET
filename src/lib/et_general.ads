------------------------------------------------------------------------------
--                                                                          --
--                    SYSTEM ET GENERAL DECLARATIONS                        --
--                                                                          --
--                                 ET                                       --
--                                                                          --
--                               S p e c                                    --
--                                                                          --
--         Copyright (C) 2019 Mario Blunk, Blunk electronic                 --
--                                                                          --
--    This program is free software: you can redistribute it and/or modify  --
--    it under the terms of the GNU General Public License as published by  --
--    the Free Software Foundation, either version 3 of the License, or     --
--    (at your option) any later version.                                   --
--                                                                          --
--    This program is distributed in the hope that it will be useful,       --
--    but WITHOUT ANY WARRANTY; without even the implied warranty of        --
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         --
--    GNU General Public License for more details.                          --
--                                                                          --
--    You should have received a copy of the GNU General Public License     --
--    along with this program.  If not, see <http://www.gnu.org/licenses/>. --
------------------------------------------------------------------------------

--   For correct displaying set tab width in your edtior to 4.

--   The two letters "CS" indicate a "construction side" where things are not
--   finished yet or intended for the future.

--   Please send your questions and comments to:
--
--   info@blunk-electronic.de
--   or visit <http://www.blunk-electronic.de> for more contact data
--
--   history of changes:
--

with ada.strings.maps;			use ada.strings.maps;
with ada.strings.bounded;       use ada.strings.bounded;
with ada.directories;
with ada.containers; 			use ada.containers;
with ada.containers.indefinite_doubly_linked_lists;
-- with gnat.source_info;

package et_general is

-- 	procedure show_line (
-- 	-- Output the line of code where the exception occured:
-- 		file : string; -- the file name like et_kicad.adb
-- 		line : natural);-- the line number
	
	version					: constant string (1..11) := "version 001";
	system_name				: constant string (1..9) := "SYSTEM ET";

	system_name_cmd_line	: constant string := "et ";
	
-- FILES, EXTENSIONS AND DIRECTORY NAMES

	-- everything generated by ET goes here:
	work_directory			: constant string (1..2)	:= "ET";


	-- When directories content is searched, the entries (files, directories) are collected
	-- in a simple list.
	package type_directory_entries is new indefinite_doubly_linked_lists (element_type => string);

	function directory_entries (
	-- Returns the entries of the given directory. Parameter category determines whether to
	-- search for directories, ordinary files or special files.
		target_directory	: in string;						-- ../lbr
		category			: in ada.directories.file_kind;		-- directory, ordinary_file, special_file
		pattern				: in string) 						-- *.txt
		return type_directory_entries.list;
		


-- All reports go into this directory:
	report_directory		: constant string (1..7)	:= "reports";
	report_extension		: constant string (1..3)	:= "log";

	
-- COMMAND LINE SWITCHES (long switches)
	--switch_about			: constant string (1..7) := "--about"; -- CS
	switch_version					: constant string := "-version";
	switch_log_level				: constant string := "-log_level";
	switch_help						: constant string := "-help";
	switch_make_default_conv		: constant string := "-make_conventions";
	switch_import_project			: constant string := "-import_project";
	switch_import_format			: constant string := "-import_format";
	switch_conventions				: constant string := "-conventions";
	switch_native_project_open		: constant string := "-open";
	switch_native_project_save_as	: constant string := "-save_as";		
	switch_execute_script			: constant string := "-script";

	
-- PAPER SIZES
    type type_paper_size is (A3, A4); -- CS: others ?
    paper_size_default : type_paper_size := A4;

	function to_paper_size (paper_size : in string) return type_paper_size;
	-- converts a string to type_paper_size

	function to_string (paper_size : in type_paper_size) return string;

	type type_paper_orientation is (PORTRAIT, LANDSCAPE);


-- NET NAMES
    -- If the name of a strand can not be identified, we default to the well proved "N$" notation:
	anonymous_net_name_prefix : constant string (1..2) := "N$";

	-- The name of a net may have 100 characters which seems sufficient for now.
	net_name_characters : character_set := to_set (ranges => (('A','Z'),('0','9'))) or to_set ("_-#");
	net_inversion_mark : constant string (1..1) := "#";
 	net_name_length_max : constant natural := 100;
	package type_net_name is new generic_bounded_length (net_name_length_max); use type_net_name;

	procedure check_net_name_length (net : in string);
	-- Tests if the given net name is longer than allowed.
	
	procedure check_net_name_characters (
		net			: in type_net_name.bounded_string;
		characters	: in character_set := net_name_characters);
	-- Tests if the given net name contains only valid characters as specified
	-- by given character set.

	function to_net_name (net_name : in string) return type_net_name.bounded_string;
	function to_string (net_name : in type_net_name.bounded_string) return string;

	function anonymous (net_name : in type_net_name.bounded_string) return boolean;
	-- Returns true if the given net name is anonymous.


-- MODULE INSTANCE NAMES

	-- The module instance name is something like LMX_1 or DRV_1. 
	-- We use this type for names of rig modules and submodules (or templates):
	module_instance_name_length_max : constant positive := 20;
	package type_module_instance_name is new generic_bounded_length (module_instance_name_length_max);

	function to_string (name : in type_module_instance_name.bounded_string) return string;
	function to_instance_name (name : in string) return type_module_instance_name.bounded_string;



	
-- GENERICS
	
	generic
		max : positive;
		type item is private;
	package stack_lifo is
		procedure push (x : item);
		function pop return item;
		function depth return natural;
		procedure init;
	end stack_lifo;

	
end et_general;

-- Soli Deo Gloria
